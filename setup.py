import sys
major, minor, _, _, _ = sys.version_info
if not (major == 2 and minor >= 5):
    print("Python >=2.5 is required to use this module.")
    sys.exit(1)

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

import os.path
import subprocess

def git_revision():
    """Get current git revision. Taken from numpy."""

    def _minimal_ext_cmd(cmd):
        # construct minimal environment
        env = {}
        for k in ['SYSTEMROOT', 'PATH']:
            v = os.environ.get(k)
            if v is not None:
                env[k] = v
        # LANGUAGE is used on win32
        env['LANGUAGE'] = 'C'
        env['LANG'] = 'C'
        env['LC_ALL'] = 'C'
        out = subprocess.Popen(cmd, stdout = subprocess.PIPE).communicate()[0]
        return out

    try:
        out = _minimal_ext_cmd(['git', 'rev-parse', 'HEAD'])
        revision = out.strip().decode('ascii')
    except OSError:
        revision = "Unknown"

    return revision

def create_version_py(version, released):
    """
    Create contents for version.py. Idea taken from numpy.
    Returns version string to be passed to setup.py.
    """

    template = """
# THIS FILE IS GENERATED BY SETUP.PY
version = '{version}'
full_version = '{full_version}'
git_revision = '{git_revision}'
release = {released}

if not release:
    version = full_version
    """

    version_str = '%d.%d.%d' % version
    full_version_str = version_str
    version_py_path = os.path.join('tigger', 'version.py')

    if os.path.exists('.git'):
        revision = git_revision()
    elif os.path.exists(version_py_path):
        # must be a source distribution, use existing version file
        globals_dict = {}
        execfile(version_py_path, globals_dict)
        revision = globals_dict['git_revision']
    else:
        revision = "Unknown"

    if not released:
        full_version_str += 'dev-' + revision[:7]

    contents = template.format(version=version_str,
        full_version=full_version_str, git_revision=revision, released=str(released))

    f = open(version_py_path, 'w')
    try:
        f.write(contents)
    finally:
        f.close()

    return full_version_str


# Make sure that setup.py is executed from its own directory.
# Not really necessary, but makes code simpler.
SETUP_PATH = os.path.split(os.path.realpath(__file__))[0]
OLD_PATH = os.getcwd()
os.chdir(SETUP_PATH)
sys.path.insert(0, SETUP_PATH)

VERSION = (0, 0, 1)
RELEASED = False
DOCUMENTATION = open('README.rst').read()
VERSION_STR = create_version_py(VERSION, RELEASED)

dependencies = ['mako', 'numpy']

try:
    setup(
        name='tigger',
        packages=['tigger'],
        provides=['tigger'],
        requires=dependencies,
        install_requires=dependencies,
        package_data={'tigger': ['*.mako']},
        version=VERSION_STR,
        author='Bogdan Opanchuk',
        author_email='bogdan@opanchuk.net',
        url='http://github.com/Manticore/tigger',
        description='GPGPU algorithms for PyCuda and PyOpenCL',
        long_description=DOCUMENTATION,
        classifiers=[
            'Development Status :: 4 - Beta',
            'Intended Audience :: Science/Research',
            'Intended Audience :: Developers',
            'License :: OSI Approved :: MIT License',
            'Programming Language :: Python :: 2',
            'Topic :: Software Development',
            'Topic :: Scientific/Engineering',
            'Operating System :: OS Independent'
        ]
    )
finally:
    del sys.path[0]
    os.chdir(OLD_PATH)
